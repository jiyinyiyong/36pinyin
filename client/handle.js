// Generated by CoffeeScript 1.3.3
var chars, tag,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

tag = function(id) {
  return document.getElementById(id);
};

chars = 'qwertyuiasdfghjk';

window.onload = function() {
  var add, back, down, enter, fetch, goup, paper, popup, render, result, search, select, using, words;
  window.socket = io.connect('http://localhost:8000/ime');
  socket.on('ready', function(data) {
    return console.log(data);
  });
  paper = tag('paper');
  window.box = tag('box');
  words = 'erwerwerw\nwerwerwer333';
  using = '';
  fetch = [];
  popup = ['aaa', 'bbb', 'ccc'];
  select = 0;
  result = [
    {
      key: 'key',
      word: 'word'
    }
  ];
  render = function() {
    var done, html, index, insert, item, _i, _len;
    done = result.map(function(x) {
      return x.word;
    }).reduce(function(x, y) {
      return x + y;
    });
    console.log("done:", done);
    popup = [using].concat((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = fetch.length; _i < _len; _i++) {
        item = fetch[_i];
        _results.push(item.word);
      }
      return _results;
    })());
    paper.innerHTML = words.replace(/\n/g, '<br>');
    paper.innerHTML += '<span id="cursor"></span>';
    window.cursor = tag('cursor');
    box.style.left = cursor.offsetLeft;
    box.style.top = cursor.offsetTop;
    html = '';
    for (index = _i = 0, _len = popup.length; _i < _len; index = ++_i) {
      item = popup[index];
      insert = index === select ? " id='select'" : '';
      html += "<p" + insert + ">" + item + "</p>";
    }
    box.innerHTML = html;
    window.target = tag('select');
    if (target.offsetTop + 36 > box.clientHeight + box.scrollTop) {
      box.scrollTop += 18;
    }
    if (target.offsetTop - 36 < box.scrollTop) {
      return box.scrollTop -= 18;
    }
  };
  render();
  socket.on('search', function(list) {
    fetch = list;
    return render();
  });
  search = function(using) {
    var left, list, piece, tail;
    select = 0;
    list = [using];
    piece = using;
    while (piece.length > 3) {
      left = piece.length % 3;
      tail = left === 0 ? piece.length - 3 : piece.length - left;
      piece = using.slice(0, tail);
      list.push(piece);
    }
    if (using.length > 2) {
      return socket.emit('search', list);
    } else {
      fetch = [];
      return render();
    }
  };
  add = function(char) {
    using += char;
    return search(using);
  };
  down = function() {
    console.log('popup::', popup);
    if (select < popup.length - 1) {
      select += 1;
    }
    return render();
  };
  goup = function() {
    if (select > 0) {
      select -= 1;
    }
    return render();
  };
  back = function() {
    using = using.slice(0, using.length - 1);
    return search(using);
  };
  enter = function() {
    return console.log('enter');
  };
  return document.onkeydown = function(e) {
    var char, code;
    code = e.keyCode;
    char = (String.fromCharCode(code)).toLowerCase();
    if (__indexOf.call(chars, char) >= 0) {
      add(char);
    } else if (code === 38) {
      goup();
    } else if (code === 40) {
      down();
    } else if (code === 13) {
      enter();
    } else if (code === 8) {
      back();
    } else {
      return true;
    }
    return false;
  };
};
